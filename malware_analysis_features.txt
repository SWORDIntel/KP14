Malware Analysis Features (with a focus on KeyPlug):

KeyPlug-Specific Analysis:
- ODG File Analysis (`keyplug_extractor.py`):
    - Treats ODG files as ZIP archives to access internal content.
    - Specifically targets JPEGs within the `Pictures/` directory of ODG files.
- Payload Extraction from JPEGs (`keyplug_extractor.py`):
    - Extracts data appended after the JPEG EOI marker.
    - Uses heuristics (e.g., high entropy scanning) to find payloads within JPEG data.
- XOR Decryption (`keyplug_extractor.py`):
    - Applies a list of known XOR keys (single and multi-byte) associated with APT41's KeyPlug to decrypt payloads.
- KeyPlug Signature Matching (`keyplug_extractor.py`):
    - Searches for specific string markers/patterns known to be in KeyPlug malware (e.g., "KEYP", "RC4", "cmd.exe", API names like "VirtualAlloc").
- General Project Goal (`README.md`):
    - Aims to reverse engineer and rebuild the source code of APT41's KeyPlug.

Reverse Engineering Tools:
- PE File Analysis (`analyze_pe.py`):
    - Validates PE file structure (MZ and PE headers).
    - Parses PE headers (machine type, sections, timestamp, characteristics).
    - Parses Optional Header (PE32/PE32+, subsystem).
    - Details PE sections (name, size, address, characteristics like code/data, R/W/X flags).
    - Extracts ASCII and Unicode strings from PE files.
    - Identifies potential Windows API names from these strings.
    - Detects further embedded PE files within a PE file.
- PE File Extraction (`extract_pe.py`):
    - Carves out potential PE files from any binary blob based on "MZ" signatures.
- Malware Code Extraction & Reconstruction (`malware_code_extractor.py`):
    - Detects probable architecture (x86, x64, ARM) using instruction patterns.
    - Extracts ASCII/Unicode strings and identifies potential API calls within them.
    - Identifies potential function boundaries using common prologue/epilogue instruction patterns.
    - Disassembly:
        - Integrates with Capstone for detailed instruction disassembly if available.
    - Advanced Analysis with Radare2 (if `r2pipe` available):
        - Performs auto-analysis (`aaa`).
        - Lists functions, their disassembly, and identified local variables.
        - Attempts to generate pseudo-C code (`pdc`).
    - Attempts to generate basic pseudo-code snippets by combining disassembly, string/API references, and function boundaries.

Cryptographic Analysis Tools:
- RC4 Decryption (`rc4_decrypt.py`, `multi_layer_decrypt.py`):
    - Decrypts data using RC4 algorithm with a user-supplied key. Utilizes `Crypto.Cipher.ARC4`.
- Multi-Layer Decryption (`multi_layer_decrypt.py`):
    - Applies a user-defined sequence of decryption layers.
    - Supports multiple XOR (single-byte or multi-byte keys) and RC4 decryption stages.
- XOR Decryption (General):
    - Also available in `keyplug_extractor.py` with its list of known keys.

Behavioral or Signature-Based Detection:
- API Sequence Detection (`api_sequence_detector.py`):
    - Identifies known malicious behavior by matching sequences of API calls.
    - Uses a configurable pattern database (JSON) for API sequences categorized by threat type (e.g., C2, persistence, injection).
    - (Intended) OpenVINO acceleration for matching.
    - Basic API call extraction by string matching API names in the binary.
- API Hash Detection (`hash_detector/detector.py`):
    - Identifies common API hashing algorithms used by malware to obfuscate API calls.
    - Uses pattern matching for hash constants and typical hashing operations (ROL, XOR, ADD).
    - (Intended) OpenVINO acceleration for pattern search.
    - Groups patterns to identify algorithm implementations.
    - Identifies 32-bit hash values near comparison instructions.
    - Reverse lookups these hash values against a pre-computed database of API name hashes to resolve them.
- Network Indicator Extraction (`keyplug_extractor.py`):
    - Uses regular expressions to find URLs, domain names, and IP addresses in binary data.
- Entropy Calculation (`keyplug_extractor.py`):
    - Calculates Shannon entropy to identify encrypted or packed data sections.
