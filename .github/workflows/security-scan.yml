name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Monday at 00:00 UTC
    - cron: '0 0 * * 1'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  security-events: write

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run Safety check
        id: safety
        continue-on-error: true
        run: |
          echo "Running Safety CVE check..."
          safety check --json --continue-on-error > safety_results.json || true
          cat safety_results.json

      - name: Run pip-audit
        id: pip-audit
        continue-on-error: true
        run: |
          echo "Running pip-audit..."
          pip-audit --format json --skip-editable > pip_audit_results.json || true
          cat pip_audit_results.json

      - name: Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            safety_results.json
            pip_audit_results.json
          retention-days: 30

      - name: Check for critical vulnerabilities
        run: |
          echo "Checking for critical vulnerabilities..."

          # Check Safety results
          SAFETY_CRITICAL=$(python3 -c "
          import json
          try:
              with open('safety_results.json', 'r') as f:
                  data = json.load(f)
                  if isinstance(data, dict):
                      vulns = data.get('vulnerabilities', [])
                      critical = [v for v in vulns if v.get('severity', '').upper() in ['CRITICAL', 'HIGH']]
                      print(len(critical))
                  else:
                      print(0)
          except:
              print(0)
          " || echo 0)

          # Check pip-audit results
          AUDIT_CRITICAL=$(python3 -c "
          import json
          try:
              with open('pip_audit_results.json', 'r') as f:
                  data = json.load(f)
                  if isinstance(data, dict):
                      deps = data.get('dependencies', [])
                      critical = 0
                      for dep in deps:
                          for vuln in dep.get('vulns', []):
                              if vuln.get('severity', '').upper() in ['CRITICAL', 'HIGH']:
                                  critical += 1
                      print(critical)
                  else:
                      print(0)
          except:
              print(0)
          " || echo 0)

          echo "Safety critical/high: $SAFETY_CRITICAL"
          echo "pip-audit critical/high: $AUDIT_CRITICAL"

          TOTAL_CRITICAL=$((SAFETY_CRITICAL + AUDIT_CRITICAL))

          if [ "$TOTAL_CRITICAL" -gt 0 ]; then
            echo "::error::Found $TOTAL_CRITICAL CRITICAL/HIGH severity vulnerabilities in dependencies!"
            exit 1
          else
            echo "No critical or high severity vulnerabilities found."
          fi

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]>=1.7.5

      - name: Run Bandit security scan
        id: bandit
        continue-on-error: true
        run: |
          echo "Running Bandit static security analysis..."
          bandit -r . \
            -ll \
            --format json \
            -o bandit_results.json \
            --exclude './tests,./kp14_qa_venv,./keyplug_venv,./stego-analyzer,./venv,./.git' \
            || true
          cat bandit_results.json

      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bandit-scan-results
          path: bandit_results.json
          retention-days: 30

      - name: Check for high severity issues
        run: |
          echo "Checking for high severity security issues..."

          HIGH_ISSUES=$(python3 -c "
          import json
          try:
              with open('bandit_results.json', 'r') as f:
                  data = json.load(f)
                  results = data.get('results', [])
                  high = [r for r in results if r.get('issue_severity', '').upper() in ['HIGH', 'CRITICAL']]
                  print(len(high))
          except:
              print(0)
          " || echo 0)

          echo "High severity issues: $HIGH_ISSUES"

          if [ "$HIGH_ISSUES" -gt 0 ]; then
            echo "::warning::Found $HIGH_ISSUES HIGH severity security issues in code!"
            # Don't fail on code issues, just warn
          else
            echo "No high severity security issues found."
          fi

  comprehensive-scan:
    name: Comprehensive Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install all security tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run comprehensive security scan
        id: comprehensive
        continue-on-error: true
        run: |
          echo "Running comprehensive security scan..."
          python scripts/security_scan.py --output-dir security_reports || true

      - name: Upload comprehensive scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-security-scan
          path: security_reports/
          retention-days: 30

      - name: Generate security badge
        if: always()
        run: |
          echo "Security scan completed. Check artifacts for detailed results."

  # Optional: Semgrep scanning for advanced security patterns
  semgrep-scan:
    name: Semgrep Security Patterns
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/secrets
          generateSarif: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
