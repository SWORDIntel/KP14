Key Supporting Utilities:

1.  **Encoded String Detector (`stego-analyzer/utils/string_decoder/string_detector.py`)**
    *   **Purpose:** Identifies and attempts to decode obfuscated or encoded strings within binary data.
    *   **Description:** This utility extracts plain ASCII and Unicode strings and then analyzes high-entropy regions for potential encoded content. It applies various decoding techniques such as XOR, ADD/SUB, and ROL/ROR with common keys, as well as checks for custom encoding patterns. Decoded strings are scored for relevance (e.g., resemblance to API names). Placeholder for OpenVINO acceleration.

2.  **Entropy Calculation (`stego-analyzer/utils/entropy.py`)**
    *   **Purpose:** Provides functions to calculate Shannon entropy, a measure of randomness, which can help identify encrypted or compressed data within files or images.
    *   **Description:** The main function `calculate_entropy_map` (currently a placeholder) is intended to divide an image into blocks and compute the entropy for each, creating a 2D map to highlight regions of high entropy.

3.  **Image Utilities (`stego-analyzer/utils/image_utils.py`)**
    *   **Purpose:** Offers foundational functions for basic image manipulation and inspection.
    *   **Description:** Includes placeholder functions for loading images (`load_image`), parsing image file segments like headers or metadata chunks (`parse_image_segments`), and checking images for signs of corruption (`check_image_corruption`).

4.  **Polyglot File Analyzer (`stego-analyzer/utils/polyglot_analyzer.py`)**
    *   **Purpose:** Analyzes files that might be polyglots (valid as multiple file types), with a focus on ODG files, to detect and extract hidden data appended after the legitimate file structure.
    *   **Description:** It finds the end of the primary file structure (e.g., ZIP in ODG) and extracts any subsequent data. This extracted data is then analyzed for entropy, known signatures (like KeyPlug markers), embedded PE files, network indicators, and is subjected to trial XOR decryption.

5.  **Compiler Idiom Detection (`stego-analyzer/utils/compiler_idiom_detection.py`)**
    *   **Purpose:** Improves the readability of decompiled code by identifying common instruction sequences generated by compilers (idioms) and replacing them with their higher-level semantic equivalents.
    *   **Description:** Uses regular expressions to find patterns such as shifts for multiplication/division by powers of two, XOR-self for zeroing registers, byte swaps, and specific arithmetic sequences. It also identifies and standardizes calls to common library functions (e.g., `memcpy`, `strlen`). Placeholder for OpenVINO acceleration.

6.  **Function Boundary Detection (`stego-analyzer/utils/function_boundary_detection.py`)**
    *   **Purpose:** Identifies the start and potentially the end of functions within a binary file by searching for common prologue and epilogue instruction sequences.
    *   **Description:** It first attempts to determine the architecture (x86/x64) from PE/ELF headers. Then, it uses predefined lists of common byte patterns for function prologues (e.g., `push ebp; mov ebp, esp`) and epilogues (e.g., `leave; ret`) to locate function boundaries. Includes a placeholder for OpenVINO-accelerated pattern matching and basic post-processing to filter results.
